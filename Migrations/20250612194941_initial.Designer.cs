// <auto-generated />
using System;
using System.Collections.Generic;
using ClusterManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClusterManagement.Migrations
{
    [DbContext(typeof(ClusterContext))]
    [Migration("20250612194941_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClusterManagement.Models.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BsoContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ClusterPurpose")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClusterStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClusterVision")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfFoundation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("IndustryCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("OneWayInCounties")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("OneWayInMunicipalities")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("OneWayInVmaNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("ClusterManagement.Models.ClusterUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("B2CId")
                        .HasColumnType("text");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InvitationCode")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.ToTable("ClusterUsers");
                });

            modelBuilder.Entity("ClusterManagement.Models.OneWayInOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClusterMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Municipality")
                        .HasColumnType("text");

                    b.Property<int?>("NumericId")
                        .HasColumnType("integer");

                    b.Property<string>("OneWayInId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SendFollowUpReminderOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SubmittedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OneWayInOpportunity");
                });

            modelBuilder.Entity("ClusterManagement.Models.ClusterUser", b =>
                {
                    b.HasOne("ClusterManagement.Models.Cluster", null)
                        .WithOne("MainContact")
                        .HasForeignKey("ClusterManagement.Models.ClusterUser", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClusterManagement.Models.Cluster", b =>
                {
                    b.Navigation("MainContact");
                });
#pragma warning restore 612, 618
        }
    }
}
